/*
 * vsd.h
 *
 *  Created on: 23.06.2014
 *      Author: trofimenko
 */

#ifndef VSD_H_
#define VSD_H_

#include "device.h"

// КЛАСС ЧРП
// Наследник класса Device использующий его структуру и методы хранения банка параметров
// имеющий свою карту параметров класс не имеющий объектов, а использующийся как базовый для
// классов конкретных ЧРП
class Vsd: public Device
{
	public:
    Vsd();
    virtual ~Vsd();

		// ФУНКЦИИ ДЛЯ РАБОТЫ С ЧРП
		// МЕТОД ЗАДАНИЯ ТИПА ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение типа двигателя из банка параметров ЧРП
		int setTypeMotor();

		// МЕТОД ЗАДАНИЯ ТИПА ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение указанное в параметре
		int setTypeMotor(float TypeMotor);

		// МЕТОД ЗАДАНИЯ ТИПА УПРАВЛЕНИЯ ДВИГАТЕЛЕМ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setTypeControlMotor();

		// МЕТОД ЗАДАНИЯ ТИПА УПРАВЛЕНИЯ ДВИГАТЕЛЕМ
		// Записывает в Modbus устройства значение указанное в параметре
		int setTypeControlMotor(float ControlMotor);

		// МЕТОД ЗАДАНИЯ ТОКА ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setCurrentMotor();

		// МЕТОД ЗАДАНИЯ ТОКА ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение указанное в параметре
		int setCurrentMotor(float CurrentMotor);

		// МЕТОД ЗАДАНИЯ НАПРЯЖЕНИЯ ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setVoltageMotor();

		// МЕТОД ЗАДАНИЯ НАПРЯЖЕНИЯ ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение указанное в параметре
		int setVoltageMotor(float VoltageMotor);

		// МЕТОД ЗАДАНИЯ ЧАСТОТЫ ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setFrequencyMotor();

		// МЕТОД ЗАДАНИЯ ЧАСТОТЫ ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение указанное в параметре
		int setFrequencyMotor(float FrequencyMotor);

		// МЕТОД ЗАПУСКА ЧРП
		int startVSD(void);

		// МЕТОД ОСТАНОВА ЧРП
		int stopVSD();

		// МЕТОД ЗАДАНИЯ ЧАСТОТЫ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setFrequency();

		// МЕТОД ЗАДАНИЯ ЧАСТОТЫ
		// Записывает в Modbus устройства значение указанное в параметре
		int setFrequency(float Frequency);

		// МЕТОД ЗАДАНИЯ МИНИМАЛЬНОГО ЗНАЧЕНИЯ ЧАСТОТЫ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setMinFrequency();

		// МЕТОД ЗАДАНИЯ МИНИМАЛЬНОГО ЗНАЧЕНИЯ ЧАСТОТЫ
		// Записывает в Modbus устройства значение указанное в параметре
		int setMinFrequency(float MinFrequency);

		// МЕТОД ЗАДАНИЯ МАКСИМАЛЬНОГО ЗНАЧЕНИЯ ЧАСТОТЫ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setMaxFrequency();

		// МЕТОД ЗАДАНИЯ МАКСИМАЛЬНОГО ЗНАЧЕНИЯ ЧАСТОТЫ
		// Записывает в Modbus устройства значение указанное в параметре
		int setMaxFrequency(float MaxFrequency);

		// МЕТОД ЗАДАНИЯ ПРЯМОГО НАПРАВЛЕНИЯ ВРАЩЕНИЯ
		int setDirectRotation();

		// МЕТОД ЗАДАНИЯ ОБРАТНОГО НАПРАВЛЕНИЯ ВРАЩЕНИЯ
		int setReverseRotation();

		// МЕТОД ЗАДАНИЯ ТЕМПА РАЗГОНА
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setSpeedUp();

		// МЕТОД ЗАДАНИЯ ТЕМПА РАЗГОНА
		// Записывает в Modbus устройства значение указанное в параметр
		int setSpeedUp(float SpeedUp);

		// МЕТОД ЗАДАНИЯ ТЕМПА ЗАМЕДЛЕНИЯ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setSpeedDown();

		// МЕТОД ЗАДАНИЯ ТЕМПА ЗАМЕДЛЕНИЯ
		// Записывает в Modbus устройства значение указанное в параметрe
		int setSpeedDown(float SpeedDown);

		// МЕТОД ЗАДАНИЯ ПРОТИВОЭДС
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setBackEmf();

		// МЕТОД ЗАДАНИЯ ПРОТИВОЭДС
		// Записывает в Modbus устройства значение указанное в параметре
		int setBackEmf(float BackEmf);

		// МЕТОД ЗАДАНИЯ ПРЕДЕЛА ТОКА
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setCurrentLim();

		// МЕТОД ЗАДАНИЯ ПРЕДЕЛА ТОКА
		// Записывает в Modbus устройства значение указанное в параметре
		int setCurrentLim(float CurrentLim);

		// МЕТОД ЗАДАНИЯ ИНДУКТИВНОСТИ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setDAxisIndunstance();

		// МЕТОД ЗАДАНИЯ ИНДУКТИВНОСТИ
		// Записывает в Modbus устройства значение указанное в параметре
		int setDAxisIndunstance(float Indunstance);

		// МЕТОД ЗАДАНИЯ ВРЕМЕНИ ФИЛЬТРАЦИИ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setFilterTimeCurrentLim();

		// МЕТОД ЗАДАНИЯ ВРЕМЕНИ ФИЛЬТРАЦИИ
		// Записывает в Modbus устройства значение указанное в параметре
		int setFilterTimeCurrentLim(float FilterTimeCurrentLim);

		// МЕТОД ЗАДАНИЯ ВРЕМЕНИ ФИЛЬТРАЦИИ НА ВЫСОКОЙ СКОРОСТИ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int seHighSpeedtFilterTimeCurrentLim();

		// МЕТОД ЗАДАНИЯ ВРЕМЕНИ ФИЛЬТРАЦИИ НА ВЫСОКОЙ СКОРОСТИ
		// Записывает в Modbus устройства значение указанное в параметре
		int setHighSpeedFilterTimeCurrentLim(float HighSpeedFilterTimeCurrentLim);

		// МЕТОД ЗАДАНИЯ КОЛИЧЕСТВА ПОЛЮСОВ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setPolesMotor();

		// МЕТОД ЗАДАНИЯ КОЛИЧЕСТВА ПОЛЮСОВ
		// Записывает в Modbus устройства значение указанное в параметр
		int setPolesMotor(float PolesMotor);

		// МЕТОД ЗАДАНИЯ ДЛИТЕЛЬНОГО НОМИНАЛЬНОГО МОМЕНТА ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setRateTorqueMotor();

		// МЕТОД ЗАДАНИЯ ДЛИТЕЛЬНОГО НОМИНАЛЬНОГО МОМЕНТА ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение указанное в параметр
		int setRateTorqueMotor(float RateTorqueMotor);

		// МЕТОД ЗАДАНИЯ СОПРОТИВЛЕНИЯ СТАТОРА
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setResistanceStator();

		// МЕТОД ЗАДАНИЯ СОПРОТИВЛЕНИЯ СТАТОРА
		// Записывает в Modbus устройства значение указанное в параметр
		int setResistanceStator(float ResistanceStator);

		// МЕТОД ЗАДАНИЯ СКОРОСТИ ВРАЩЕНИЯ ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setSpeedMotor();

		// МЕТОД ЗАДАНИЯ СКОРОСТИ ВРАЩЕНИЯ ДВИГАТЕЛЯ
		// Записывает в Modbus устройства значение указанное в параметр
		int setSpeedMotor(float SpeedMotor);

		// МЕТОД ЗАДАНИЯ ЧАСТОТЫ КОММУТАЦИИ
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setSwitchingFrequency();

		/// МЕТОД ЗАДАНИЯ ЧАСТОТЫ КОММУТАЦИИ
		// Записывает в Modbus устройства значение указанное в параметр
		int setSwitchingFrequency(float SwitchingFrequency);

		// МЕТОД ЗАДАНИЯ МОМЕНТА
		// Записывает в Modbus устройства значение из банка параметров ЧРП
		int setTorqueLimit();

		/// МЕТОД ЗАДАНИЯ МОМЕНТА
		// Записывает в Modbus устройства значение указанное в параметр
		int setTorqueLimit(float TorqueLimit);

		// ФУНКЦИИ УПРАВЛЕНИЯ РЕЖИМАМИ?

	protected:

};

#endif /* VSD_H_ */
