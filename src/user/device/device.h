/*
 * device.h

 *
 *  Created on: 23.06.2014
 *      Author: trofimenko
 */

#ifndef DEVICE_H_
#define DEVICE_H_

#include "define.h"

/*!
\struct Parameter
Структура для обработки и хранения параметров в станции управления
*/
struct Parameter
{
  /// Уникальный идентификатор параметра заменяет название параметра равен
  /// одному из кодов из enum enID
  enID ID;
  /// Уровень доступа к параметру каждый параметр имеет уровень доступа равен
  /// одному из кодов из enAccess
  enAccess Access;
  /// Операции с параметром: чтение, запись, запись во время останова равен
  /// одному из кодов из enOperations
  enOperations Operation;
  /// Физическая величина параметра: длина, время и т.д. равен
  /// одному из кодов из enPhysic
  enPhysic Physic;
  /// Поле состояния параметра: true если значение параметра валидно и false
  /// если значение параметра не валидно, равен одному из кодов enValidity
  bool Validity;
  /// Значение параметра, для единообразия значения всех параметров будем
  /// хранить в типе double
  double Value;
  /// Минимально допустимое значение для этого параметра. Используется для
  /// вывода диапазона значений на экран и проверке вводимых значений
  double Minimum;
  /// Максимально допустимое значение для этого параметра. Используется для
  /// вывода диапазона значений на экран и проверке вводимых значений
  double Maximum;
  /// Значение по умолчанию
  double Default;
};

/*!
\class Device
Базовый класс для всех устройств в системе содержит банк параметров
устройства во внутреннем представлении и набором методов для работы с ними
*/
class Device
{
/// Элементы в этой секции доступны из любой части программы
public:
  /// Констуртор класса
  Device();
  /// Деструктор класса
  virtual ~Device();


  /*!
  \function getCheckedValueParameter
  Функция получения проверенного значения параметра
  \param int ID - уникальный идентификатор параметра
  \param double &Value - параметр ссылка на переменную которой в случае успешного
  выполнения функции просвоится значение
  \return Код выполнения операции
  */
  int getCheckedValueParameter(int ID, double &Value);

  /// МЕТОД ЗАПИСИ ЗНАЧЕНИЯ ПАРАМЕТРА
  /// Параметры:
  /// ID - уникальный идентификатор параметра
  /// Value - записываемое значение
  /// Возвращает:
  /// Код выполнения операции
  int setValueParameter(int ID, float Value);

  /// МЕТОД ЗАПИСИ ЗНАЧЕНИЯ ПАРАМЕТРА С ПРОВЕРКОЙ УРОВНЯ CИСТЕМНОГО ДОСТУПА
  /// Параметры:
  /// ID - уникальный идентификатор параметра
  /// Value - записываемое значение
  /// AccessLevel - уровень доступа
  /// Возвращает:
  /// Код выполнения операции
  int setValueParameterCheckingAccess(int ID, float Value);

  /// МЕТОД ЗАПИСИ ЗНАЧЕНИЯ ПАРАМЕТРА С ПРОВЕРКОЙ УРОВНЯ ДОСТУПА В ПАРАМЕТРАХ
  /// Параметры:
  /// ID - уникальный идентификатор параметра
  /// Value - записываемое значение
  /// Access - уровень доступа
  /// Возвращает:
  /// Код выполнения операции
  int setValueParameterCheckingAccess(int ID, float Value, int Access);

  /// МЕТОД СБРОСА ЗНАЧЕНИЯ ПАРАМЕТРА В ЗНАЧЕНИЕ ПО УМОЛЧАНИЮ
  int resetToDefault(int ID);

  /// МЕТОД СБРОСА ВСЕХ ПАРАМЕТРОВ В ЗНАЧЕНИЯ ПО УМОЛЧАНИЮ
  int resetToDefaultAll();

  /// Элементы в этой секции доступны из класса и его потомков
protected:



  /// Массив параметров устройства
  Parameter Parameters[];

  /// Смещение между элементами массива и ID для устройства
  int Shift;

  /// Количество элементов массива устройства
  int Quantity;

  /* Базовые методы работы со структурой Parameter */
  /*!
  \function getIdField
  Функция получения поля Id из структуры
  \return 0 - ошибка или Id
  */
  enID getIdField();

  /*!
  \function setIdField
  Функция присвоения поля Id в структуре
  \return 0 - ошибка или присвоенный Id
  */
  enID setIdField(enID ID);

  /*!
  \function getAccessField
  Функция получения поля Access из структуры
  \return 0 - ошибка или Access
  */
  enAccess getAccessField();

  /*!
  \function setAccessField
  Функция присвоения поля Access в структуре
  \return 0 - ошибка или присвоенный Access
  */
  enAccess setAccessField(enAccess Access);

  /*!
  \function getOperationField
  Функция получения поля Operation из структуры
  \return 0 - ошибка или Operation
  */
  enOperations getOperationField();

  /*!
  \function setOperationField
  Функция присвоения поля Operation в структуре
  \return 0 - ошибка или присвоенный Operation
  */
  enOperations setOperationField(enOperations Operation);

  /*!
  \function getPhysicField
  Функция получения поля Physic из структуры
  \return 0 - ошибка или Physic
  */
  enPhysic getPhysicField();

  /*!
  \function setPhysicField
  Функция присвоения поля Physic в структуре
  \return 0 - ошибка или присвоенный Physic
  */
  enPhysic setPhysicField(enPhysic Physic);

  /*!
  \function getValidityField
  Функция получения поля Validity из структуры
  \return 0 - ошибка или Validity
  */
  enValidity getValidityField();

  /*!
  \function setValidityField
  Функция присвоения поля Validity в структуре
  \return 0 - ошибка или присвоенный Validity
  */
  enValidity setPhysicField(enValidity Validity);

  /*!
  \function getValueField
  Функция получения поля Value из структуры
  */
  double getValueField();

  /*!
  \function setValidityField
  Функция присвоения поля Value в структуре
  */
  double setValueField(double Value);

  /*!
  \function getMinimumField
  Функция получения поля Minimum из структуры
  */
  double getMinimumField();

  /*!
  \function setMinimumField
  Функция присвоения поля Minimum в структуре
  */
  double setMinimumField(double Minimum);

  /*!
  \function getMaximumField
  Функция получения поля Maximum из структуры
  */
  double getMaximumField();

  /*!
  \function setMaximumField
  Функция присвоения поля Maximum в структуре
  */
  double setMaximumField(double Maximum);

  /*!
  \function getDefaultField
  Функция получения поля Default из структуры
  */
  double getDefaultField();

  /*!
  \function setDefaultField
  Функция присвоения поля Default в структуре
  */
  double setDefaultField(double Default);


  /// МЕТОД ПОЛУЧЕНИЯ ID ПАРАМЕТРА
  /// В метод передаётся ID параметра над которым мы ходим провести действия
  /// метод по ID определяет к какамому элементу в массиве параметров устройства
  /// мы хотим обратиться, извлекает у этого элемента массива значения поля ID
  /// Параметры:
  /// ID - идентификатор параметра
  /// Value - параметр ссылка на переменную которой присваивается ID
  /// Возвращает:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - элемент массива найден и ID извлечено
  int getID(int ID, int &Value);

  /// МЕТОД ПОЛУЧЕНИЯ УРОВНЯ ДОСТУПА К ПАРАМЕТРУ
  /// В метод передаётся ID параметра у которого мы хотим узнать уровень доступа
  /// метод по ID определяет сначала проверяет ID на корректность, после чего
  /// извлекает уровень доступа с проверкой на корректность значения уровня
  /// Параметры:
  /// ID - идентификатор параметра
  /// Value - параметр ссылка на переменную которой присваивается уровень доступа
  /// Возвращает:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  /// RETURN_ERROR_ACCESS_VALUE - Не корректный уровень доступа у параметра
  int getAccess(int ID, int &Access);

  /// МЕТОД ПОЛУЧЕНИЯ CИСТЕМНОГО УРОВНЯ ДОСТУПА
  /// Параметры:
  /// Access - параметр ссылка на переменную которой присваивается уровень доступа
  /// Возвращает:
  /// RETURN_ERROR_ACCESS_VALUE - Не корректный уровень доступа у параметра
  int getAccessSystem(int &Access);

  /// МЕТОД ПОЛУЧЕНИЯ ОПЕРАЦИЙ НАД ПАРАМЕТРОМ
  /// В метод передаётся ID параметра у которого мы хотим узнать возможные операции
  /// метод по ID определяет сначала проверяет ID на корректность, после чего
  /// извлекает операции с проверкой на корректность операций
  /// Параметры:
  /// ID - идентификатор параметра
  /// Operation - параметр ссылка на переменную которой присваивается уровень доступа
  /// Возвращает:
  /// Возвращает:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  /// RETURN_ERROR_OPERATION_VALUE - Не корректня операция у параметра
  int getOperation(int ID, int &Operation);

  /// МЕТОД ПОЛУЧЕНИЯ СОСТОЯНИЯ СИСТЕМЫ
  /// Параметры:
  /// Operation - параметр ссылка на переменную которой присваивается
  /// возможность записи в параметры с ограниченным доступом
  int getOperationSystem(int &Operation);

  /// МЕТОД ПОЛУЧЕНИЯ ФИЗИЧЕСКОЙ ВЕЛИЧИНЫ ПАРАМЕТРА
  /// Параметры:
  /// ID - идентификатор параметра
  /// Physic - параметр ссылка на переменную которой присваивается
  /// код физической величины параметры
  /// Возвращает:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  /// RETURN_ERROR_PHYSIC_VALUE - Не корректная физическая величина у параметра
  int getPhysic(int ID, int &Physic);

  /// МЕТОД ПОЛУЧЕНИЯ ВАЛИДНОСТИ ЗНАЧЕНИЯ ПАРАМЕТРА
  /// Параметры:
  /// ID - идентификатор параметра
  /// Validity - параметр ссылка на переменную которой присваивается
  /// код физической величины параметры
  /// Возвращает:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  /// RETURN_ERROR_VALIDITY_VALUE - Не корректный флаг валидности у параметра
  int getValidity(int ID, int &Validity);

  /// МЕТОД ПОЛУЧЕНИЯ ЗНАЧЕНИЯ ПАРАМЕТРА
  /// Параметры:
  /// ID - идентификатор параметра
  /// Value - параметр ссылка на переменную которой присваивается
  /// код физической величины параметры
  /// Возвращает:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  int getValue(int ID, float &Value);

  /// МЕТОД ПОЛУЧЕНИЯ МИНИМАЛЬНОГО ЗНАЧЕНИЯ ПАРАМЕТРА
  /// Параметры:
  /// ID - идентификатор параметра
  /// Minimum - параметр ссылка на переменную которой присваивается
  /// минимально допустимое значение параметра
  /// Возвращает:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  int getMinimum(int ID, float &Minimum);

  /// МЕТОД ПОЛУЧЕНИЯ МАКСИМАЛЬНОГО ЗНАЧЕНИЯ ПАРАМЕТРА
  /// Параметры:
  /// ID - идентификатор параметра
  /// Maximum - параметр ссылка на переменную которой присваивается
  /// максимально допустимое значение параметра
  /// Возвращает:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  int getMaximum(int ID, float &Maximum);

  /// МЕТОД ПОЛУЧЕНИЯ ЗНАЧЕНИЯ ПАРАМЕТРА ПО УМОЛЧАНИЮ
  /// Параметры:
  /// ID - идентификатор параметра
  /// Default - параметр ссылка на переменную которой присваивается
  /// значение параметра по умолчанию
  /// Возвращает:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  int getDefault(int ID, float &Default);

  /// МЕТОД ЗАПИСИ ЗНАЧЕНИЯ ПАРАМЕТРА В ПОЛЕ VALUE
  /// Параметры:
  /// ID - идентификатор параметра
  /// Value - значение
  /// Возвращает:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Заись проведена успешно
  int setValue(int ID, float Value);

  /// МЕТОД ПРОВЕРКИ ID ПАРАМЕТРА
  /// Метод проверяет совпадает ли ID указанный в функции со значение поля
  /// ID в элементе массива для этого ID
  /// Параметры:
  /// ID - идентификатор параметра
  /// Возвращет:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - ID совпадают
  /// RETURN_ERROR_ID - ID не совпадают
  int checkID(int ID);

  /// МЕТОД ПРОВЕРКИ УРОВНЯ ДОСТУПА К ПАРАМЕТРУ
  /// Метод проверяет достаточно ли уровня доступа установленного в системе
  /// для операций над параметром
  /// Параметры:
  /// ID - идентификатор параметра
  /// Возвращет:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  /// RETURN_ERROR_ACCESS_VALUE - Не корректный уровень доступа у параметра
  /// RETURN_ERROR_ACCESS - Уровня доступа не достаточно
  int checkAccess(int ID);

  /// МЕТОД ПРОВЕРКИ УРОВНЯ ДОСТУПА К ПАРАМЕТРУ
  /// Метод проверяет достаточно ли уровня доступа указанного в параметрах
  /// функции для операций над параметром
  /// Параметры:
  /// ID - идентификатор параметра
  /// Access - уровень доступа
  /// Возвращет:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  /// RETURN_ERROR_ACCESS_VALUE - Не корректный уровень доступа у параметра
  /// RETURN_ERROR_ACCESS - Уровня доступа не достаточно
  int checkAccess(int ID, int Access);

  /// МЕТОД ПРОВЕРКИ ДОПУСТИМОСТИ ОПЕРАЦИИ НАД ПАРАМЕТРОМ
  /// Параметры:
  /// ID - идентификатор параметра
  /// Operation - операция над значением параметра
  /// Возвращает:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  /// RETURN_ERROR_OPERATION_VALUE - Не корректня операция у параметра
  /// RETURN_ERROR_OPERATION - Не корректня операция у параметра
  int checkOperation(int ID, int Operation);

  /// МЕТОД ПРОВЕРКИ ЗАПИСЫВАЕМОГО ЗНАЧЕНИЯ НА ПРЕВЫШЕНИЕ МИНИМУМА
  /// Метод проверяет не меньше ли записываемое значение миниального для параметра
  /// Параметры:
  /// ID - идентификатор параметра
  /// Value - записываемое значение
  /// Возвращет:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  /// RETURN_ERROR_MINIMUM - записываемое значение больше максимума для параметра
  int checkMinimum(int ID, float Value);

  /// МЕТОД ПРОВЕРКИ ЗАПИСЫВАЕМОГО ЗНАЧЕНИЯ НА ПРЕВЫШЕНИЕ МАКСИМУМА
  /// Метод проверяет не привышеет ли записываемое значение максимальное для параметры
  /// Параметры:
  /// ID - идентификатор параметра
  /// Value - записываемое значение
  /// Возвращет:
  /// RETURN_ERROR - Неизвестная ошибка
  /// RETURN_OK - Уровень доступа найден и корректен
  /// RETURN_ERROR_ID_VALUE - Не корректный ID
  /// RETURN_ERROR_ID - ID не совпадают
  /// RETURN_ERROR_MAXIMUM - записываемое значение больше максимума для параметра
  int checkMaximum(int ID, float Value);

  /// Функция получения всей информации и параметре из структуры
  /// Параметры:
  /// ID - уникальный идентификатор параметра
  /// Value - параметр ссылка на переменную которой в случае успешного
  /// выполнения функции просвоится значение
  /// Возвращает:
  /// Код выполнения операции
  int getParameter(int ID, Parameter &Par);

  /// Элементы в этой секции доступны только из класса
private:
  //// Уровень доступа в системе
  int AccessSystem;
  //// Состояние системы
  int OperationSystem;
};

#endif /* DEVICE_H_ */
